"""Comando de gesti√≥n de Django para limpiar migraciones problem√°ticas de horses"""from django.core.management.base import BaseCommandfrom django.db import connectionimport sysclass Command(BaseCommand):    help = 'Limpia las migraciones problem√°ticas de la aplicaci√≥n horses que no existe'    def add_arguments(self, parser):        parser.add_argument(            '--force',            action='store_true',            help='Fuerza la eliminaci√≥n sin confirmaci√≥n',        )    def handle(self, *args, **options):        self.stdout.write(            self.style.WARNING('üîÑ Iniciando limpieza de migraciones problem√°ticas...')        )                # Verificar si hay migraciones de horses        with connection.cursor() as cursor:            try:                cursor.execute("""                    SELECT COUNT(*) FROM django_migrations                     WHERE app = 'horses';                """)                horses_migrations = cursor.fetchone()[0]                                if horses_migrations == 0:                    self.stdout.write(                        self.style.SUCCESS('‚úÖ No hay migraciones de horses para limpiar')                    )                    return                                self.stdout.write(                    self.style.WARNING(f'‚ö†Ô∏è  Encontradas {horses_migrations} migraciones de horses')                )                                # Pedir confirmaci√≥n si no se usa --force                if not options['force']:                    confirm = input('¬øDeseas continuar con la limpieza? (s/N): ')                    if confirm.lower() not in ['s', 'si', 's√≠', 'y', 'yes']:                        self.stdout.write(                            self.style.ERROR('‚ùå Operaci√≥n cancelada')                        )                        return                                # Eliminar migraciones de horses                cursor.execute("""                    DELETE FROM django_migrations                     WHERE app = 'horses';                """)                                deleted_count = cursor.rowcount                self.stdout.write(                    self.style.SUCCESS(f'‚úÖ Eliminadas {deleted_count} migraciones de horses')                )                                # Intentar eliminar tablas relacionadas                tables_to_check = [                    'horses_horse',                    'horses_horse_genealogy',                    'horses_horse_technologies'                ]                                for table in tables_to_check:                    try:                        cursor.execute(f"""                            SELECT EXISTS (                                SELECT FROM information_schema.tables                                 WHERE table_name = '{table}'                            );                        """)                                                if cursor.fetchone()[0]:                            cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE;")                            self.stdout.write(                                self.style.SUCCESS(f'‚úÖ Tabla {table} eliminada')                            )                    except Exception as e:                        self.stdout.write(                            self.style.WARNING(f'‚ö†Ô∏è  No se pudo verificar/eliminar {table}: {e}')                        )                                # Limpiar constraints problem√°ticas                try:                    cursor.execute("""                        DROP INDEX IF EXISTS horses_horse_internal_id_c019ac91_uniq;                    """)                    self.stdout.write(                        self.style.SUCCESS('‚úÖ Constraint problem√°tica eliminada')                    )                except Exception as e:                    self.stdout.write(                        self.style.WARNING(f'‚ÑπÔ∏è  Constraint ya limpia: {e}')                    )                                self.stdout.write(                    self.style.SUCCESS('üéâ Limpieza completada exitosamente')                )                            except Exception as e:                self.stdout.write(                    self.style.ERROR(f'‚ùå Error durante la limpieza: {e}')                )                sys.exit(1)